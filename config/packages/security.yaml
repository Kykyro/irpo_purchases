security:
    role_hierarchy:
        ROLE_ANALYTIC:  [ ROLE_ANALYTIC ]
        ROLE_ROIV:  [ ROLE_ROIV ]
        ROLE_SMI: [ROLE_SMI]
        ROLE_SMALL_CURATOR: [ ROLE_SMALL_CURATOR, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_SMALL_CLUSTERS: [ ROLE_SMALL_CLUSTERS ]
        ROLE_SMALL_CLUSTERS_LOT_1: [ ROLE_SMALL_CLUSTERS_LOT_1 ]
        ROLE_SMALL_CLUSTERS_LOT_2: [ ROLE_SMALL_CLUSTERS_LOT_2 ]
        ROLE_SPECTATOR: [ ROLE_SPECTATOR ]
        ROLE_USER: [ ROLE_USER ]
        ROLE_INSPECTOR: [ ROLE_INSPECTOR, ROLE_ALLOWED_TO_SWITCH  ]
        ROLE_REGION: [ ROLE_REGION ]
        ROLE_JOURNALIST: [ ROLE_JOURNALIST ]
        ROLE_ADMIN: [ ROLE_USER, ROLE_INSPECTOR, ROLE_REGION, ROLE_JOURNALIST ]
        ROLE_SUPERADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_DISCIPLINE: [ ROLE_DISCIPLINE ]
        ROLE_DIRECTORATE: [ ROLE_DIRECTORATE ]

    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: uuid
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            switch_user: true
            lazy: true
            provider: app_user_provider
            custom_authenticator:
                - App\Security\AuthAuthenticator
            logout:
                path: app_logout
            user_checker: App\Security\UserChecker
            
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
         - { path: ^/roiv, roles: [ROLE_SMI, ROLE_ROIV, ROLE_DIRECTORATE] }
         - { path: ^/region, roles: [ROLE_REGION, ROLE_SMALL_CLUSTERS] }
         - { path: ^/journalist, roles: ROLE_JOURNALIST }
         - { path: ^/inspector, roles: [ROLE_INSPECTOR, ROLE_SPECTATOR, ROLE_SMALL_CURATOR, ROLE_DISCIPLINE, ROLE_DIRECTORATE] }
         - { path: ^/analyst, roles: [ROLE_INSPECTOR, ROLE_ANALYTIC, ROLE_SMALL_CURATOR] }
         - { path: ^/smi, roles: [ROLE_SMI] }
         - { path: ^/download, roles: ROLE_INSPECTOR }
         - { path: ^/download, roles: ROLE_REGION }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
